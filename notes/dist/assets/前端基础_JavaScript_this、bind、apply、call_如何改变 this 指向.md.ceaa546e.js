import{o as a,c as e,a as l}from"./app.57353960.js";const i='{"title":"如何改变 this 指向","description":"","frontmatter":{},"headers":[{"level":2,"title":"通过 new","slug":"通过-new"},{"level":2,"title":"通过 apply、call","slug":"通过-apply、call"},{"level":2,"title":"通过 bind","slug":"通过-bind"}],"relativePath":"前端基础/JavaScript/this、bind、apply、call/如何改变 this 指向.md","lastUpdated":1615518465086}',t={},h=l('<h1 id="如何改变-this-指向"><a class="header-anchor" href="#如何改变-this-指向" aria-hidden="true">#</a> 如何改变 this 指向</h1><hr><h2 id="通过-new"><a class="header-anchor" href="#通过-new" aria-hidden="true">#</a> 通过 new</h2><p>使用 new 操作符可以将一个构造函数构造成一个对象，构造函数的 this 永久绑定到这个正在构造的对象。</p><h2 id="通过-apply、call"><a class="header-anchor" href="#通过-apply、call" aria-hidden="true">#</a> 通过 apply、call</h2><p>每个函数的原型里面都有一个非继承的 apply、和 call 方法，这两方法可以改变一个函数的 this 指向。</p><h2 id="通过-bind"><a class="header-anchor" href="#通过-bind" aria-hidden="true">#</a> 通过 bind</h2><p>bind 和 apply、call 方法类似，将一个新的执行上下文绑定到一个函数中，bind 与上两者的区别是：bind 返回的一个改变了 this 指向的函数，而 apply 和 call 则是立即执行函数。</p>',8);t.render=function(l,i,t,r,d,p){return a(),e("div",null,[h])};export default t;export{i as __pageData};
