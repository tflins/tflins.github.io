import{o as n,c as a,a as s}from"./app.57353960.js";const t='{"title":"闭包","description":"","frontmatter":{},"headers":[{"level":2,"title":"闭包是什么","slug":"闭包是什么"},{"level":2,"title":"如何创建闭包","slug":"如何创建闭包"},{"level":2,"title":"闭包的作用","slug":"闭包的作用"},{"level":3,"title":"模拟块级作用域","slug":"模拟块级作用域"},{"level":3,"title":"模拟私有属性","slug":"模拟私有属性"},{"level":2,"title":"内存泄露的问题","slug":"内存泄露的问题"}],"relativePath":"前端基础/JavaScript/执行上下文、作用域、闭包/闭包.md","lastUpdated":1615518465089}',e={},p=s('<h1 id="闭包"><a class="header-anchor" href="#闭包" aria-hidden="true">#</a> 闭包</h1><hr><h2 id="闭包是什么"><a class="header-anchor" href="#闭包是什么" aria-hidden="true">#</a> 闭包是什么</h2><p>闭包是指有权访问另一个函数作用域变量的函数。</p><h2 id="如何创建闭包"><a class="header-anchor" href="#如何创建闭包" aria-hidden="true">#</a> 如何创建闭包</h2><p>创建闭包的常见方法就是在函数内部创建另一个函数，内部的函数有权访问父级作用域的作用域变量。</p><div class="language-js"><pre><code><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">null</span>\n  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="闭包的作用"><a class="header-anchor" href="#闭包的作用" aria-hidden="true">#</a> 闭包的作用</h2><p>闭包的作用主要是用来设计私有变量的方法，模拟模块化，避免污染全局作用域，还有延长作用域链。</p><h3 id="模拟块级作用域"><a class="header-anchor" href="#模拟块级作用域" aria-hidden="true">#</a> 模拟块级作用域</h3><div class="language-js"><pre><code><span class="token punctuation">(</span><span class="token function">funtion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 闭包内的变量不会污染外部的作用域</span>\n\n<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="模拟私有属性"><a class="header-anchor" href="#模拟私有属性" aria-hidden="true">#</a> 模拟私有属性</h3><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> type <span class="token operator">=</span> <span class="token string">&#39;黄种人&#39;</span>\n\n  <span class="token comment">// 特权方法</span>\n  <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> type\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="内存泄露的问题"><a class="header-anchor" href="#内存泄露的问题" aria-hidden="true">#</a> 内存泄露的问题</h2><p>由于闭包使用了其他函数作用域的变量，会造成更多的内存占用，使用不当会容易造成内存泄露。通常一个函数的作用域和作用域内部的所有变量会在函数执行结束后被销毁，但当函数返回一个闭包时，这个函数的作用域就会一直保存到闭包不存在为止。</p>',15);e.render=function(s,t,e,o,c,l){return n(),a("div",null,[p])};export default e;export{t as __pageData};
