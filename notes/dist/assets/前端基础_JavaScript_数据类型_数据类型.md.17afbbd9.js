import{o as e,c as a,a as n}from"./app.57353960.js";const s='{"title":"数据类型","description":"","frontmatter":{},"headers":[{"level":2,"title":"原始数据类型","slug":"原始数据类型"},{"level":2,"title":"引用数据类型","slug":"引用数据类型"},{"level":2,"title":"在内存中的存储","slug":"在内存中的存储"}],"relativePath":"前端基础/JavaScript/数据类型/数据类型.md","lastUpdated":1615518465090}',t={},o=n('<h1 id="数据类型"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h1><p>在 JavaScript 中存在两种数据类型：原始数据类型、引用数据类型。</p><h2 id="原始数据类型"><a class="header-anchor" href="#原始数据类型" aria-hidden="true">#</a> 原始数据类型</h2><p>在 JavaScript 现有规范中存在 7 种原始数据类型:</p><div class="language-js"><pre><code><span class="token keyword">null</span>\n<span class="token keyword">undefined</span>\nnumber\nstring\nboolean\n<span class="token function">symbol</span> <span class="token punctuation">(</span>es6 新增<span class="token punctuation">)</span>\n<span class="token function">bigint</span> <span class="token punctuation">(</span>es11 新增<span class="token punctuation">)</span>\n</code></pre></div><blockquote><p>在 es10 中提出一直新的原始数据类型: <code>bigint</code> 大数类型，<s>目前在 es11 中已经到了提案的第四个阶段。</s> es2020 已正式发布，此前进入 Stage 4 的提案均被纳入正式规范，该基本数据类型已于 2020年6月 在 es11 中正式成为新规范。</p></blockquote><p>原始数据类型存储的是值，没有函数可以调用，如 <code>undefined.toString()</code> 会报错：toString of undefined。但 <code>&#39;1&#39;.toString()</code> 可以正确调用，原因是 <code>&#39;1&#39;</code> 已经被转换成 <code>String</code> 对象类型，不再是原始数据类型。</p><h2 id="引用数据类型"><a class="header-anchor" href="#引用数据类型" aria-hidden="true">#</a> 引用数据类型</h2><p>引用数据类型也就是对象，存储的是（地址）指针。操作对象的时候，不是直接操作对实际的对象进行操作，而是操作对象的引用。</p><h2 id="在内存中的存储"><a class="header-anchor" href="#在内存中的存储" aria-hidden="true">#</a> 在内存中的存储</h2><ul><li>原始数据类型存储在栈内存中</li><li>引用数据类型在堆内存中开辟空间存储内容，将内容在堆内存中的地址存储在栈内存中</li></ul>',11);t.render=function(n,s,t,i,d,r){return e(),a("div",null,[o])};export default t;export{s as __pageData};
