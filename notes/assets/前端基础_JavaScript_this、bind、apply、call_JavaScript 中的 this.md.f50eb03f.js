import{o as n,c as s,a}from"./app.57353960.js";const p='{"title":"JavaScript 中的 this","description":"","frontmatter":{},"headers":[{"level":2,"title":"全局执行上下文中的 this","slug":"全局执行上下文中的-this"},{"level":2,"title":"函数执行上下文中的 this","slug":"函数执行上下文中的-this"},{"level":3,"title":"直接调用","slug":"直接调用"},{"level":3,"title":"作为对象的方法调用","slug":"作为对象的方法调用"},{"level":2,"title":"call()、apply()","slug":"call-、apply"},{"level":2,"title":"bind()","slug":"bind"},{"level":2,"title":"构造函数","slug":"构造函数"},{"level":2,"title":"箭头函数","slug":"箭头函数"},{"level":2,"title":"作为一个 DOM 事件处理函数","slug":"作为一个-dom-事件处理函数"}],"relativePath":"前端基础/JavaScript/this、bind、apply、call/JavaScript 中的 this.md","lastUpdated":1615518465084}',t={},o=a('<h1 id="javascript-中的-this"><a class="header-anchor" href="#javascript-中的-this" aria-hidden="true">#</a> JavaScript 中的 this</h1><p>在 ECAMScript 规范中，这样定义 this</p><blockquote><p>this 关键字执行为当前执行环境的 ThisBinding</p></blockquote><p>在 MDN 中这样解释 this</p><blockquote><p>在绝大多数情况下，函数的调用方式决定了 this 的值。</p></blockquote><p>可以这样理解，在 JavaScript 中 this 的指向是调用时决定的，而不是在创建时决定的。如此一来，JavaScript 的 this 指向具有一定的迷惑性，简而言之，JavaScript 的 this 具有运行时绑定的特性。</p><hr><h2 id="全局执行上下文中的-this"><a class="header-anchor" href="#全局执行上下文中的-this" aria-hidden="true">#</a> 全局执行上下文中的 this</h2><p>全局执行上下文（任何函数外部）中的 this 指向全局对象。\b</p><div class="language-js"><pre><code><span class="token comment">// 在浏览器中全局执行上下文是 window 对象</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> window<span class="token punctuation">)</span> <span class="token comment">// true</span>\n\n<span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token string">&#39;1997&#39;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">===</span> window<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment">// true</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">,</span> window<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment">// 1 1 1</span>\n</code></pre></div><h2 id="函数执行上下文中的-this"><a class="header-anchor" href="#函数执行上下文中的-this" aria-hidden="true">#</a> 函数执行上下文中的 this</h2><p>在函数内部的 this 指向，取决于函数调用的方式。</p><h3 id="直接调用"><a class="header-anchor" href="#直接调用" aria-hidden="true">#</a> 直接调用</h3><p>在非严格模式下，this 指向全局对象</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> window<span class="token punctuation">)</span> <span class="token comment">// true</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// Window {TEMPORARY: 0, PERSISTENT: 1, Symbol(Symbol.toStringTag): &quot;Window&quot;, constructor: ƒ}</span>\n<span class="token punctuation">}</span>\n<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre></div><p>在严格模式下，如果 this 没有被执行环境定义，则保持为 <code>undefined</code>，如以下代码，第一个例子中的全局函数是直接调用则 this 为 undefined，第二个例子全局对象作为 window 对象的方法调用，则 this 为 window。</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token string">&#39;use strict&#39;</span>\n\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> window<span class="token punctuation">)</span> <span class="token comment">// false</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span>\n<span class="token punctuation">}</span>\n<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token string">&#39;use strict&#39;</span>\n\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> window<span class="token punctuation">)</span> <span class="token comment">// true</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// Window {TEMPORARY: 0, PERSISTENT: 1, Symbol(Symbol.toStringTag): &quot;Window&quot;, constructor: ƒ}</span>\n<span class="token punctuation">}</span>\nwindow<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="作为对象的方法调用"><a class="header-anchor" href="#作为对象的方法调用" aria-hidden="true">#</a> 作为对象的方法调用</h3><p>当函数作为对象的方法调用时，函数的 this 是调用该函数的对象。</p><p>如下列代码，fn 作为对象 obj 的一个方法来调用，this 的指向便是调用这个方法的对象 obj。</p><div class="language-js"><pre><code><span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">1943</span>\n\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  value<span class="token operator">:</span> <span class="token number">1997</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 1997</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nobj<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><p>但值得一提的是，下列代码中的 fn 函数又被赋值给 fn2，fn2 直接调用，this 指向 window（浏览器中），所以打印的值为 1943</p><div class="language-js"><pre><code><span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">1943</span>\n\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  value<span class="token operator">:</span> <span class="token number">1997</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 1997</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> fn2 <span class="token operator">=</span> obj<span class="token punctuation">.</span>fn\n<span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="call-、apply"><a class="header-anchor" href="#call-、apply" aria-hidden="true">#</a> call()、apply()</h2><p>使用 call() 或 apply() 方法改变函数的执行上下文，函数的 this 指向为传入的执行上下文。</p><div class="language-js"><pre><code><span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">100</span>\n\n<span class="token keyword">var</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>\n  value<span class="token operator">:</span> <span class="token number">200</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 100</span>\n<span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span> <span class="token comment">// 200</span>\n<span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span> <span class="token comment">// 200</span>\n</code></pre></div><h2 id="bind"><a class="header-anchor" href="#bind" aria-hidden="true">#</a> bind()</h2><p>使用 bind() 方法改变 this 的指向，和 call()、apply() 类似，使用 bind 绑定 this 的函数，this 永远指向 bind 方法绑定的第一个参数，无论何时调用。</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> fn2 <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  value<span class="token operator">:</span> <span class="token number">100</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  value<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>\n  fn<span class="token operator">:</span> fn2\n<span class="token punctuation">}</span>\n<span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 100</span>\nobj<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 100</span>\n</code></pre></div><h2 id="构造函数"><a class="header-anchor" href="#构造函数" aria-hidden="true">#</a> 构造函数</h2><p>作为构造函数，this 永久绑定在正在构造的对象上。</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">// 18</span>\n</code></pre></div><h2 id="箭头函数"><a class="header-anchor" href="#箭头函数" aria-hidden="true">#</a> 箭头函数</h2><p>箭头函数没有自己的 this ，其 this 指向外层非箭头函数的一个执行环境。</p><p>在 MDN 中有这样的描述：</p><blockquote><p>箭头函数会捕获其所在上下文的this值，作为自己的this值。</p></blockquote><p>可以这样理解：箭头函数没有 this，在箭头函数中使用 this 将会沿着作用域链寻找 this。</p><div class="language-js"><pre><code><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 浏览器中</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> window<span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">0</span>\n\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  value<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nobj<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 0</span>\n</code></pre></div><h2 id="作为一个-dom-事件处理函数"><a class="header-anchor" href="#作为一个-dom-事件处理函数" aria-hidden="true">#</a> 作为一个 DOM 事件处理函数</h2><p>当函数作为 DOM 的事件处理函数时，this 指向触发这个事件的 DOM 元素。</p><div class="language-js"><pre><code><span class="token keyword">const</span> $div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>\n$div<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token number">1997</span><span class="token punctuation">)</span>\n\n$div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// &lt;div id=&quot;1997&gt;&lt;/div&gt;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1997</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n$div<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div>',42);t.render=function(a,p,t,c,e,l){return n(),s("div",null,[o])};export default t;export{p as __pageData};
