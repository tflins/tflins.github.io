import{o as e,c as a,a as r}from"./app.8c8a1ac2.js";const l='{"title":"== 和 ===","description":"","frontmatter":{},"headers":[{"level":2,"title":"相等 ==","slug":"相等"},{"level":2,"title":"全等 ===","slug":"全等"}],"relativePath":"前端基础/JavaScript/1-数据类型相关/3-== 和 ===.md","lastUpdated":1616664530558}',t={},i=r('<h1 id="和"><a class="header-anchor" href="#和" aria-hidden="true">#</a> == 和 ===</h1><p>两个等号（==）是相等，三个等号是全等（===）。判断两个变量是否相等在编程中是非常重要的操作，比较字符串、数字等基本数据类型的相等性的时候比较简单，但在比较对象的时候，问题就变得很复杂了。最开始在 ECMAScript 中比较相等或不相等的时候，会把两个对象转成相似的类型。但后来，有人提出质疑: 这种转换是否合理。最后，ECMAScript 的方案是提供了两种操作符 <strong>==</strong> 和 <strong>===</strong>。</p><h2 id="相等"><a class="header-anchor" href="#相等" aria-hidden="true">#</a> 相等 ==</h2><p>比较两个变量是否相等的时候，会判断两者的类型是否相同，如果相同就进行值的比较，值相同则返回 true ，不同返回 false。两者的数据类型不相同的话，就会进行类型转换，转换后来进行值的比较。</p><p>类型转换规则如下：</p><ul><li>如果比较的一方为布尔值，则将布尔值转数值，true 转为 1，false 转为 0</li><li>如果一方为字符串，另一个操作数为数值时，会把字符串转成数字再进行比较</li><li>如果其中一个操作数是对象，另一个操作数不是对象，则会把调用对象的 valueOf() 方法转成原始值再进行比较</li><li>如果两者都输对象，则比较他们是不是同一个对象，同一个对象返回 true，不同则返回 false</li><li>null 和 undefined 返回 true</li><li>NaN 和 NaN 不相等</li></ul><h2 id="全等"><a class="header-anchor" href="#全等" aria-hidden="true">#</a> 全等 ===</h2><p>全等比较，两者类型和值都要相同才会返回 true</p>',8);t.render=function(r,l,t,s,d,n){return e(),a("div",null,[i])};export default t;export{l as __pageData};
