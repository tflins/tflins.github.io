import{o as n,c as s,a}from"./app.57353960.js";const p='{"title":"bind 和 apply、call 的区别","description":"","frontmatter":{},"relativePath":"前端基础/JavaScript/this、bind、apply、call/apply 和 apply、bind 的区别.md","lastUpdated":1615518465085}',t={},o=a('<h1 id="bind-和-apply、call-的区别"><a class="header-anchor" href="#bind-和-apply、call-的区别" aria-hidden="true">#</a> bind 和 apply、call 的区别</h1><hr><p>bind、apply、call 这三个方法都可以改变函数的 this（执行上下文）指向。</p><p>bind 和 apply、call 有所不同的是：bind 会返回一个改变了 this 指向的函数，不会自执行；而 apply、call 改变 this 执行后会立即执行函数。</p><p>apply、call 的区别在于传入的参数，两者的第一个参数都是传入的执行上下文，函数的执行参数以参数数组的形式传入 apply，而 call 的函数执行参数则是第二个参数开始传入。</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  a<span class="token operator">:</span> <span class="token number">1</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> msg <span class="token operator">=</span> <span class="token string">&#39;这是一条消息&#39;</span>\n\n<span class="token keyword">var</span> bindFn <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> msg<span class="token punctuation">)</span>\n\n<span class="token keyword">var</span> result1 <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">[</span>msg<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 立即执行 输出 &#39;这是一条消息&#39;</span>\n<span class="token keyword">var</span> result2 <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> msg<span class="token punctuation">)</span> <span class="token comment">// 立即执行 输出 &#39;这是一条消息&#39;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bindFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 调用才执行 输出 &#39;这是一条消息&#39; 1</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result1<span class="token punctuation">,</span> result2<span class="token punctuation">)</span> <span class="token comment">// 1 1</span>\n\n</code></pre></div>',6);t.render=function(a,p,t,c,l,e){return n(),s("div",null,[o])};export default t;export{p as __pageData};
