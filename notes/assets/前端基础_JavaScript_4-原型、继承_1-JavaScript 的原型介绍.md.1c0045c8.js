import{o,c as t,a as e}from"./app.8c8a1ac2.js";const r='{"title":"JavaScript 的原型介绍","description":"","frontmatter":{},"headers":[{"level":2,"title":"prototype","slug":"prototype"},{"level":2,"title":"constructor","slug":"constructor"},{"level":2,"title":"_proto_","slug":"proto"}],"relativePath":"前端基础/JavaScript/4-原型、继承/1-JavaScript 的原型介绍.md","lastUpdated":1616666209978}',a={},c=e('<h1 id="javascript-的原型介绍"><a class="header-anchor" href="#javascript-的原型介绍" aria-hidden="true">#</a> JavaScript 的原型介绍</h1><p>在创建一个新函数的时候，都会为该函数创建一个 <code>prototype</code> 对象，成为原型对象。所有通过这个函数构造出来的实例，都可以使用构造函数的原型对象，原型的存在本质上来说是为了节省内存和实现继承。</p><h2 id="prototype"><a class="header-anchor" href="#prototype" aria-hidden="true">#</a> prototype</h2><p>在函数创建的时候，会根据特定的规则为函数创建一个 <code>prototype</code> 的属性，这个属性指向函数的原型对象。几乎所有的函数在创建的时候都会创建 <code>prototype</code> 属性，但使用 <code>Function.prototype.bind</code> 创建出来的函数例外。</p><h2 id="constructor"><a class="header-anchor" href="#constructor" aria-hidden="true">#</a> constructor</h2><p>在创建函数的时候生成的原型对象 <code>prototype</code> 自带一个属性：<code>constructor</code>，这个属性是个指针，指向这个 <code>prototype</code> 所在的函数。</p><h2 id="proto"><a class="header-anchor" href="#proto" aria-hidden="true">#</a> <strong>proto</strong></h2><p>每个对象都有 <code>__proto__</code> 属性，这个属性是一个指针，指向这个对象的构造函数的原型对象（<code>prototype</code>）。这个属性开始并非标准，只是浏览器自行提供的一个属性，在 es6 时，为确保兼容性，被标准化为传统功能。</p>',8);a.render=function(e,r,a,p,d,i){return o(),t("div",null,[c])};export default a;export{r as __pageData};
