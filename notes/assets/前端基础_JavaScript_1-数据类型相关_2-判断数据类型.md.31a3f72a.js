import{o as e,c as t,a}from"./app.8c8a1ac2.js";const n='{"title":"判断数据类型","description":"","frontmatter":{},"headers":[{"level":2,"title":"typeof 操作符","slug":"typeof-操作符"},{"level":3,"title":"为什么 typeof null 结果为 \'object\'","slug":"为什么-typeof-null-结果为-object"},{"level":2,"title":"instanceof 操作符","slug":"instanceof-操作符"}],"relativePath":"前端基础/JavaScript/1-数据类型相关/2-判断数据类型.md","lastUpdated":1616664526330}',o={},s=a('<h1 id="判断数据类型"><a class="header-anchor" href="#判断数据类型" aria-hidden="true">#</a> 判断数据类型</h1><p>JavaScript 是弱类型的编程语言，需要提供一种手段来进行类型的检测 -- typeof。</p><h2 id="typeof-操作符"><a class="header-anchor" href="#typeof-操作符" aria-hidden="true">#</a> typeof 操作符</h2><p>typeof 是操作符不是函数，所以括号不是必须的</p><p>typeof 可能会返回一下几种情况：</p><blockquote><ul><li>&quot;undefined&quot; -- 如果这个值未定义</li><li>&quot;boolean&quot; -- 如果这个值是布尔值</li><li>&quot;string&quot; -- 如果这个值是字符串</li><li>&quot;number&quot; -- 如果这个值是数字</li><li>&quot;object&quot; -- 如果这个值是对象或 null</li><li>&quot;function&quot; -- 如果这个值是函数</li><li>&quot;symbol&quot; -- 如果这个值是 symbol (es6 新增)</li><li>&quot;bigint&quot; -- 如果这个值是 bigint (es11 新增)</li></ul></blockquote><p>typeof 这个操作符有着一些迷惑性行为，如 <code>typeof null</code> 的值为 &#39;object&#39; ，在 Chrome 7 和 Safari 5 之前的浏览器对正则使用 typeof 操作符判断类型会返回 &#39;function&#39; ，而其他浏览器则返回 &#39;object&#39; 。<strong>对于原始数据类型来说，除了 null 之外，都可以判断类型。</strong></p><h3 id="为什么-typeof-null-结果为-object"><a class="header-anchor" href="#为什么-typeof-null-结果为-object" aria-hidden="true">#</a> 为什么 typeof null 结果为 &#39;object&#39;</h3><p>这是由于 JavaScript 最初数据类型是 32 位存储的，前三位存储的数据类型，对象类型表示为三个零 000，而 null 表示为空，存储的都是零，所以 typeof 将它判断为 &#39;object&#39; ，虽然现在 typeof 的判断逻辑已经改了，但这个问题由于历史原因，老代码太多，保留了下来。在 JavaScript 红宝石这本书中也提到，null 在逻辑上是一个空对象指针，所以也可以在逻辑上看做一个对象，但它却不是对象。</p><h2 id="instanceof-操作符"><a class="header-anchor" href="#instanceof-操作符" aria-hidden="true">#</a> instanceof 操作符</h2><p>instanceof 操作符可以判断一个对象是不是一个对象类型，其中通过检测构造函数的 prototype 是否出现在某个对象实例里面。返回 true 或 false。</p><div class="language-js"><pre><code><span class="token string">&#39;hello world&#39;</span> <span class="token keyword">instanceof</span> <span class="token class-name">String</span> <span class="token comment">// false</span>\n<span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&#39;你好，世界&#39;</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">String</span> <span class="token comment">// true</span>\n</code></pre></div>',12);o.render=function(a,n,o,l,p,i){return e(),t("div",null,[s])};export default o;export{n as __pageData};
