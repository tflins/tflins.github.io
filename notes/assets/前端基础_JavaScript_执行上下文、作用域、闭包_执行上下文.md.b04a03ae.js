import{o as a,c as e,a as r}from"./app.57353960.js";const t='{"title":"执行上下文（执行环境）","description":"","frontmatter":{},"headers":[{"level":2,"title":"全局执行环境","slug":"全局执行环境"},{"level":2,"title":"函数执行环境","slug":"函数执行环境"},{"level":2,"title":"Eval 执行环境","slug":"eval-执行环境"},{"level":2,"title":"执行栈","slug":"执行栈"}],"relativePath":"前端基础/JavaScript/执行上下文、作用域、闭包/执行上下文.md","lastUpdated":1615518465088}',l={},h=r('<h1 id="执行上下文（执行环境）"><a class="header-anchor" href="#执行上下文（执行环境）" aria-hidden="true">#</a> 执行上下文（执行环境）</h1><p>执行环境定义了变量或函数有权访问的其他数据，决定它们各自的行为。每一个执行环境都存在一个<strong>变量对象</strong>，环境中定义的变量和函数都保存在这个对象中。虽然我们编写的代码无法访问到这个对象，但是解析器处理数据的时候会在后台使用它。</p><h2 id="全局执行环境"><a class="header-anchor" href="#全局执行环境" aria-hidden="true">#</a> 全局执行环境</h2><p>全局执行环境是最外层的一个执行环境，有且只有一个。EMCAScript 所在的不同宿主机中，全局执行环境也不一样。在浏览器中全局执行环境是 window 对象，因此所有的全局变量和函数都作为 window 的属性和方法。在 node 中全局执行环境是 global 。全局执行环境在浏览器或网页关闭时被销毁，其保持的变量和函数定义也随之销毁。</p><h2 id="函数执行环境"><a class="header-anchor" href="#函数执行环境" aria-hidden="true">#</a> 函数执行环境</h2><p>当执行流进入一个函数的时候，就会创建一个函数的执行环境，将这个函数的执行环境推入执行栈中，等函数执行完成后，就会将执行环境在执行栈中出栈，销毁执行环境中存储的变量。</p><h2 id="eval-执行环境"><a class="header-anchor" href="#eval-执行环境" aria-hidden="true">#</a> Eval 执行环境</h2><p>在 Eval 中执行的代码也有自己的执行上下文。</p><h2 id="执行栈"><a class="header-anchor" href="#执行栈" aria-hidden="true">#</a> 执行栈</h2><p>执行栈，用来存储代码运行时创建的所有执行上下文。当 JavaScript 引擎第一次执行你的脚本时，会创建一个全局全局执行环境，将全局执行环境推入执行栈中。当执行流进到一个函数的时候，该函数的执行环境被推入执行栈中，而函数执行之后，栈将其环境弹出，将控制权交给之前执行环境。JavaScript 的执行机制，便是这种方式控制着。</p>',10);l.render=function(r,t,l,i,d,s){return a(),e("div",null,[h])};export default l;export{t as __pageData};
